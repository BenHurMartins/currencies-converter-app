{"version":3,"sources":["api/index.js","components/Selector.js","i18n/index.js","components/CurrenciesConverter.js","components/CryptoCurrenciesConverter.js","App.js","reportWebVitals.js","index.js"],"names":["LATEST","getCryptoCurrencies","a","Promise","resolve","reject","fetch","method","then","response","json","data","map","item","symbol","catch","err","getCurrencies","convertCurrency","fromCurrency","toCurrency","value","rates","toFixed","convertCurrencyCrypto","toLowerCase","market_data","price_usd","currency","Selector","props","onChange","options","currencies","i18n","title","EN","PT_BR","currencySubtitle","cryptoCurrencySubtitle","cryptoCurrencyConvertButton","currencyConvertButton","from","to","CurrenciesConverter","useState","setFromCurrency","setToCurrency","fromValue","setFromValue","toValue","setToValue","className","lang","placeholder","min","step","pattern","e","target","replace","isNaN","currenciesArray","onClick","parseFloat","result","alert","error_message","CryptoCurrenciesConverter","fromCurrencyCrypto","setFromCurrencyCrypto","toCurrencyCrypto","setToCurrencyCrypto","fromValueCrypto","setFromValueCrypto","toValueCrypto","setToValueCrypto","cryptoCurrenciesArray","cryptos","App","setLang","setCurrenciesArray","setCurrencies","setCryptoCurrenciesArray","setCryptos","useEffect","Object","keys","cryptoValues","dataCryptosSimbols","name","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0417c7c5.chunk.js","sourcesContent":["const LATEST = 'https://api.frankfurter.app/latest'\nconst LIST = 'https://api.frankfurter.app/currencies'\nconst LIST_CRYPTO = 'https://data.messari.io/api/v2/assets?fields=symbol,name'\nconst LATEST_CRYPTO = 'https://data.messari.io/api/v1/assets/'\n\nexport const getCryptoCurrencies = async () => {\n    return new Promise(\n        (resolve, reject) => {\n            fetch(`${LIST_CRYPTO}`, { method: 'GET' })\n                .then(response => response.json())\n                .then(data => {\n                    const cryptoSymbols = data.data.map(item => item.symbol)\n                    resolve(data.data)\n\n                })\n                .catch(err => {\n                    reject(err)\n                })\n        }\n    )\n}\nexport const getCurrencies = async () => {\n    return new Promise(\n        (resolve, reject) => {\n            fetch(`${LIST}`, { method: 'GET' })\n                .then(response => response.json())\n                .then(data => {\n                    resolve(data)\n                })\n                .catch(err => {\n                    reject(err)\n                })\n        }\n    )\n}\n\nexport const convertCurrency = async (fromCurrency, toCurrency, value) => {\n    return new Promise(\n        (resolve, reject) => {\n            fetch(`${LATEST}?from=${fromCurrency}`, { method: 'GET' })\n                .then(response => response.json())\n                .then(data => {\n                    resolve((data.rates[toCurrency] * value).toFixed(2))\n                })\n                .catch(err => {\n                    reject(err)\n                })\n        }\n    )\n}\n\nexport const convertCurrencyCrypto = async (fromCurrency, toCurrency, value) => {\n    return new Promise(\n        (resolve, reject) => {\n            fetch(`${LATEST_CRYPTO}${fromCurrency.toLowerCase()}/metrics`, { method: 'GET' })\n                .then(response => response.json())\n                .then(({ data }) => {\n                    if (toCurrency == 'USD') {\n                        resolve((data.market_data.price_usd * value).toFixed(2))\n                    } else {\n                        fetch(`${LATEST}?from=USD`, { method: 'GET' })\n                            .then(response => response.json())\n                            .then(currency => {\n                                resolve(((currency.rates[toCurrency] * data.market_data.price_usd) * value).toFixed(2))\n                            })\n                            .catch(err => {\n                                reject(err)\n                            })\n                    }\n                })\n                .catch(err => {\n                    reject(err)\n                })\n        }\n    )\n}","import '../styles.css';\n\nconst Selector = (props) => {\n    return (\n        <select value={props.value} onChange={props.onChange}\n        >\n            {\n                props.options.map(item => {\n                    return <option value={item}>{props.currencies[item]}</option>\n                })\n            }\n        </select>\n    )\n}\n\nexport default Selector;","export const i18n =\n{\n    title: {\n        EN: 'Currency Converter',\n        PT_BR: 'Conversor de Moedas'\n    },\n    currencySubtitle: {\n        EN: 'Currency',\n        PT_BR: 'Moeda'\n    },\n    cryptoCurrencySubtitle: {\n        EN: 'Crypto Currency',\n        PT_BR: 'Cripto Moeda'\n    },\n    cryptoCurrencyConvertButton: {\n        EN: 'Convert Crypto',\n        PT_BR: 'Converter Cripto Moeda'\n    },\n    currencyConvertButton: {\n        EN: 'Convert',\n        PT_BR: 'Converter'\n    },\n    from: {\n        EN: 'From:',\n        PT_BR: 'De:'\n    },\n    to: {\n        EN: 'To:',\n        PT_BR: 'Para:'\n    }\n}","import { useState } from \"react\";\nimport '../styles.css';\nimport Selector from \"./Selector\";\nimport { convertCurrency } from \"../api\";\nimport { i18n } from \"../i18n\";\n\nconst CurrenciesConverter = (props) => {\n\n    const [fromCurrency, setFromCurrency] = useState('USD')\n    const [toCurrency, setToCurrency] = useState('EUR')\n    const [fromValue, setFromValue] = useState(0)\n    const [toValue, setToValue] = useState(0)\n\n    const handleFromValueChange = (e) => {\n        const value = e.target.value.replace(',', '.')\n        if (!isNaN(value)) {\n            setFromValue(value)\n        }\n    }\n    const handleFromCurrencyChange = (e) => {\n        setFromValue(0)\n        setFromCurrency(e.target.value);\n    }\n    const handleToCurrencyChange = (e) => {\n        setToValue(0)\n        setToCurrency(e.target.value);\n    }\n\n    const handleConversion = () => {\n        const value = parseFloat(fromValue).toFixed(2) == 0 ? parseFloat(1).toFixed(2) : parseFloat(fromValue).toFixed(2)\n        setFromValue(value)\n\n        convertCurrency(fromCurrency, toCurrency, value)\n            .then(result => {\n                setToValue(result)\n            })\n            .catch(err => {\n                alert(\"Error trying to convert currencies, try again later.\")\n            })\n            .catch(err => {\n                alert(\"Error: \" + err.error_message)\n            })\n    }\n\n    return (\n        <>\n            <p className=\"app-subtitle\">\n                {i18n.currencySubtitle[props.lang]}\n            </p>\n            <div className=\"main-container\">\n                <div className=\"form-container\">\n                    <div className=\"half-container\">\n                        <p className=\"label\">{i18n.from[props.lang]}</p>\n                        <input placeholder=\"0.00\" min=\"0\" value={fromValue} step=\"0.01\" title=\"Currency\" pattern=\"^\\d+(?:\\.\\d{1,2})?$\" onChange={handleFromValueChange} />\n                        <Selector value={fromCurrency} onChange={handleFromCurrencyChange} options={props.currenciesArray} currencies={props.currencies} />\n                    </div>\n                    <div className=\"half-container\">\n                        <p className=\"label\">{i18n.to[props.lang]}</p>\n                        <input placeholder=\"0.00\" value={toValue} />\n                        <Selector value={toCurrency} onChange={handleToCurrencyChange} options={props.currenciesArray} currencies={props.currencies} />\n                    </div>\n                </div>\n                <div>\n                    <button onClick={handleConversion}>{i18n.currencyConvertButton[props.lang]}</button>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default CurrenciesConverter;","import { useState } from \"react\";\nimport '../styles.css';\nimport Selector from \"./Selector\";\nimport { convertCurrencyCrypto } from \"../api\";\nimport { i18n } from \"../i18n\";\n\nconst CryptoCurrenciesConverter = (props) => {\n\n    const [fromCurrencyCrypto, setFromCurrencyCrypto] = useState('BTC')\n    const [toCurrencyCrypto, setToCurrencyCrypto] = useState('USD')\n    const [fromValueCrypto, setFromValueCrypto] = useState(0)\n    const [toValueCrypto, setToValueCrypto] = useState(0)\n\n    const handleFromValueCryptoChange = (e) => {\n        const value = e.target.value.replace(',', '.')\n        if (!isNaN(value)) {\n            setFromValueCrypto(value)\n        }\n    }\n\n    const handleFromCurrencyChangeCrypto = (e) => {\n        setFromValueCrypto(0)\n        setFromCurrencyCrypto(e.target.value);\n    }\n    const handleToCurrencyChangeCrypto = (e) => {\n        setToValueCrypto(0)\n        setToCurrencyCrypto(e.target.value);\n    }\n\n\n    const handleCryptoConversion = () => {\n        const value = parseFloat(fromValueCrypto).toFixed(2) == 0 ? parseFloat(1).toFixed(2) : parseFloat(fromValueCrypto).toFixed(2)\n        setFromValueCrypto(value)\n        convertCurrencyCrypto(fromCurrencyCrypto, toCurrencyCrypto, value)\n            .then(result => {\n                setToValueCrypto(result)\n            })\n    }\n\n    return (\n        <>\n            <p className=\"app-subtitle\">\n                {i18n.cryptoCurrencySubtitle[props.lang]}\n            </p>\n            <div className=\"main-container\">\n                <div className=\"form-container\">\n                    <div className=\"half-container\">\n                        <p className=\"label\">{i18n.from[props.lang]}</p>\n                        <input className=\"input-from\" placeholder=\"0.00\" min=\"0\" value={fromValueCrypto} onChange={handleFromValueCryptoChange} />\n                        <Selector value={fromCurrencyCrypto} onChange={handleFromCurrencyChangeCrypto} options={props.cryptoCurrenciesArray} currencies={props.cryptos} />\n                    </div>\n                    <div className=\"half-container\">\n                        <p className=\"label\">{i18n.to[props.lang]}</p>\n                        <input className=\"input-to\" placeholder=\"0.00\" value={toValueCrypto} />\n                        <Selector value={toCurrencyCrypto} onChange={handleToCurrencyChangeCrypto} options={props.currenciesArray} currencies={props.currencies} />\n                    </div>\n                </div>\n                <div>\n                    <button onClick={handleCryptoConversion}>{i18n.cryptoCurrencyConvertButton[props.lang]}</button>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default CryptoCurrenciesConverter;","import React, { useEffect, useState } from 'react';\nimport './styles.css';\nimport { getCryptoCurrencies, getCurrencies, } from \"./api\";\nimport CurrenciesConverter from \"./components/CurrenciesConverter\";\nimport CryptoCurrenciesConverter from \"./components/CryptoCurrenciesConverter\";\nimport { i18n } from \"./i18n\";\n\n\nfunction App() {\n\n  const [lang, setLang] = useState('EN')\n  //default value\n  const [currenciesArray, setCurrenciesArray] = useState([])\n  const [currencies, setCurrencies] = useState({})\n  //crypto\n  const [cryptoCurrenciesArray, setCryptoCurrenciesArray] = useState([])\n  const [cryptos, setCryptos] = useState([])\n\n  useEffect(async () => {\n    getCurrencies()\n      .then(data => {\n        setCurrenciesArray(Object.keys(data))\n        setCurrencies(data)\n      })\n      .catch(err => {\n        alert(\"Error trying to get the currencies, try again later\")\n      })\n\n  }, [])\n\n  useEffect(async () => {\n    getCryptoCurrencies()\n      .then(data => {\n        let cryptoValues = {}\n        const dataCryptosSimbols = data.map(item => {\n          cryptoValues[item.symbol] = item.name\n          return item.symbol\n        })\n        setCryptoCurrenciesArray(dataCryptosSimbols)\n        setCryptos(cryptoValues)\n      })\n      .catch(err => {\n        alert(\"Error: \" + err.error_message)\n      })\n  }, [])\n\n  return (\n    <div className=\"app\">\n      <div className=\"i18n\">\n        <button className={lang == 'EN' ? \"langSelected\" : null} onClick={() => setLang('EN')}>EN</button>\n        <button className={lang == 'PT_BR' ? \"langSelected\" : null} onClick={() => setLang('PT_BR')} >PT</button>\n      </div>\n      <header className=\"app-header\">\n        <p className=\"app-title\">\n          {i18n.title[lang]}\n        </p>\n      </header>\n      <body className=\"app-body\">\n        <CurrenciesConverter\n          currenciesArray={currenciesArray}\n          currencies={currencies}\n          lang={lang}\n        />\n        <CryptoCurrenciesConverter\n          cryptoCurrenciesArray={cryptoCurrenciesArray}\n          currenciesArray={currenciesArray}\n          cryptos={cryptos}\n          currencies={currencies}\n          lang={lang}\n        />\n      </body>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}